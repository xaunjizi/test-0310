
 /************************************************************ 
  Company: Shenzhen Chipsbank Technologies Co., Ltd
    CBM72XX  触摸库头文件
  Description:    
	基本使用只需要3个函数即可,分别是:
	1: 触控键初始化函数:TouchKey_init_fun .
	2: 触控键定时计数器初始化函数:TouchKey_timer_fun .
	3: 获取按键信息函数:GetTouchKey_fun(void)
	4: 其他增强性能功能函数      
  History:         //历史修改记录  
      <author>   <time>    <version >  <desc>  
  	 jflin		  23-03-10  V0.0	   最初版本
	  
***********************************************************/

#ifndef __KEY_SCAN__
#define __KEY_SCAN__  
  

#define		KeyValueL		XWORD[1020/2]   //bit0-bit15   //触摸按键值输出寄存器
#define		KeyValueH		XWORD[1022/2]	//bit16-bit31  //触摸按键值输出寄存器
 /* ==================库函数========================	*/
extern uint8  TouchKey_init_fun(uint8 SensorNum,uint8 *phySensor, uint8 *SensorSensitivity,uint32 flag);	   //主函数中必须初始化
extern  void  TouchKey_timer_fun(void);	 //5MS定时器中断中调用
extern  void  GetTouchKey_fun(void);	 //主循环程序中调用
extern  void  TouchKey_parm_set(uint8 ADCParm0,uint8 ADCParm1,uint8 LeveParm ,uint8 Parm3);	 //可选调用函数
extern uint16 GetKey_inf(uint8 Key,uint8 Mode);	   //可选调用函数
extern  void  TouchSensor_init_Fun(void);//可选调用函数,触发一次自校准
/* 其他抗干扰环境应用  */
#endif
 

 
/* ==================库函数调用基本使用说明========================	
             详细说明见 CBM73XX  触摸库使用指南文档 
//-------------------------------------------------------------------------------------
1:函数1:    
   	  uint8 TouchKey_init_fun(uint8 SensorNum,uint8 *phySensor, uint8 *SensorSensitivity,uint32 flag);
参数： SensorNum:触控键数目	；phySensor:物理按键序列指针；SensorSensitivity：物理按键所对应的灵敏度级数
        flag:
            bit0-3：抗干扰滤波等级：=0关闭（扫一次）；=1~15值越大越抗干扰滤波能力越强（扫两次）. 默认12
            bit4: 抗干拢滤波等级增强控制：=1增强
            bit5：按键快速响应功能选择。=1:使能，=0:关闭。
	        bit6: 单键长按键自校准功能选择。=0:使能，=1:关闭。
            bit7: 函数TouchKey_parm_set() 功能，=0:此函数设置参数无效；=1:设置有效。
	        bit9-8:	多键长按时自校准 同时按键的最小按键数.=0:关闭=01:2个按键;=02:3个按键;=03:4个按键
			bit12-10: 多键长按自校准等待时间 .=0:6s(默认);=N:Ns(N=12..6), =7:0.5s.
            bit14-13: 临键抑制功能选择,多键触发时只输出1个最灵敏健值.。=00:关闭, =01:2键同时触发只输出最灵敏健值。
			           =2:3个键触发时只输出最灵敏的一个按键值.	=3:4个按键.
            bit15：bit14-13临检抑制功能的模式选择。0-老模式；1-新模式。默认0。
            bit19-16：RSV
            bit20：=0-当前按键响应快（适合普通触摸按键）；=1-所有按键响应速度一致（适合滑条触摸按键）。默认0。
            bit21：=0-高信噪比模式；=1-高灵敏度模式，但噪声相对较大。默认0。
            bit31-22：RSV 
			 
说明: 1:上电需要初始化触控函数,按键数目,物理按键,灵敏度，返回值=0 初始化ok,=!0 初始化fail
	  2：在上电后电压稳定后调用次函数，只需要初始化一次即可。
	  3：初始化的按键数必须与物理按键数目一致。物理按键号需要查看封装列表说明。
	  4:l灵敏度级数范围0-48，值越小灵敏度越高，	值越大灵敏度越低。一般建议默认12级。
示例: SensorNum=4;	phySensor[]={2，1，3，4}；SensorSensitivity[]={12，12，12，12} ；
//-------------------------------------------------------------------------------------
2:函数2:
 		void  TouchKey_timer_fun(void)	
参数： 无 
说明: 1: 需要将此函数在5ms定时器中调用即可。
	  2：此函数是给触键扫描函数提供计数功能，若未在定时器调用，按键将不会有输出值。
//-------------------------------------------------------------------------------------
3:函数3: void  GetTouchKey_fun(void)
参数： 无 
说明:  1：触控键扫描和按键信息获取函数，按键信息保存在寄存器KeyValueL,KeyValueH中，每个bit代表一个按键值。
       2：最大支持32个按键。bitX=0，表示X键无按键信息；按bitX=1，表示X键有按键信息 。
	   3：触控按键的是经过消抖处理的 ，默认消抖时间40ms.获取到按键直接使用即可。
	   4：此函数在主循环中直接调用即可（建议主循环的周期时间要小于10ms)，也可以在定时器中调用。
	   5: 此函数的执行时间跟按键数目有关系，调用一次的时间在1-3ms.
//-------------------------------------------------------------------------------------
4:函数4: void	TouchKey_parm_set(uint8 ADCParm0,uint8 ADCParm1,uint8 LeveParm ,uint8 Parm3);	 //可选调用函数
参数： 
    Input:         
    uint8 ADCParm0: sensor 参数配置.(默认0x68)
	 				bit0-1， sensor放电时间:默认0； 0:=充电时间;1:=1/2充电时间(默认); 2:=1/4充电时间;3:=1/8充电时间;
					bit2-3， 基线：=0-7680；=1-10240；=2-12800；=3-15360	 ,默认2
					bit4-7， sensor 充放电分频系数T ,频率=24(16)M/(2T+1)	 ,默认T=6, 16	M/13=1.23M
	uint8 ADCParm1：sensor 参数配置.(默认0x44)
                    bit0-3， 灵敏度响应速度: =0:最慢; =15：最快。 默认=4
                    bit4-7， sensor充电时间: =2*(ADCParm1+1)*5.3us, 默认=0x04,即53us.	
    uint8 LeveParm: 触摸按键灵敏度级数指针(默认0x13)
                    bit0-3， 滤波基数: (n+1)*2级，n=(0-15),如=0:2级滤波	  ,	=15:32级滤波 ,默认8级
					bit4-7， 扫描消抖时间: ((n+1)*2)*5ms,n=(0-15),如=0:10ms消抖	  ,	=15:160ms消抖,默认20ms		
    uint8 Parm3:    sensor 参数配置.(默认0x74)
                    bit0-2， 放电截止电压，0~2=1.2v ,3=1.8v ,4-2.4v ,5-3v ,6-3.6v ,7-4.2v，默认4
                    bit3，   保留未用
                    bit4-6， 充电截止电压, 0=3.6V ,1=3.8V ,2=4.0v ,3=4.2V ,... 7=5.0v，默认7
                    bit7，   工作模式：=0-跟随模式；=1-固定模式，默认=0
  Output:         no//对输出参数的说明。
 
说明: //设置触摸键相关参数
   				 1: 一般情况不用调用此函数，使用默认参数即可。
				 2: 调用此函数必须在初始化TouchKey_init_fun 之前调用 .
				 3: TouchKey_init_fun的uint16 flag参数的第7位必须置一
//-------------------------------------------------------------------------------------
5:函数6: uint16	GetKey_inf(uint8 Key,uint8 Mode);	   //可选调用函数
参数：
 Input:         
	uint8 Key:   单个触摸按键的逻辑序列号，范围0-18 .(MAX key number)
	uint8 Mode ：获取触摸按键信息的模式			  
				Mode=0：输出当前按键的ADC采样值. 
				Mode=1：输出当前按键的环境基线值.
				Mode=2：输出当前按键的抵消电容值.
                Mode=3：输出当前按键的域值.
                Mode=4：输出自校准标志.（返回0x04表示触发了一次自校准）
                Mode=5：抗干扰滤波最大值
				Mode=6：=0x8000-抗干扰滤波机制起效；=0-无效
				Mode=xx:保留，返回值为0；
  Output:         uint16 parm, 输出值通过函数返回值输出，长度为16位。
说明:
          //获取单个（逻辑）按键值的相关参数，可通过不同模式确定获取的参数类型
   				  一般情况不用调用此函数，调试或测试时可使用。
*/
